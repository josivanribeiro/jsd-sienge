/* Copyright josivanSilva (Developer); 2018 */
package com.josivansilva.sienge.service;

import java.math.BigDecimal;

import com.josivansilva.sienge.constants.Constants;

/**
 * Transportation Cost service class.
 * 
 * @author josivan@josivansilva.com
 *
 */
public class TransportationCostService {
 
	
	/**
	 * Calculates the transportation cost.
	 * 
	 * @param distanceOnPavedHighway the distanceOnPavedHighway
	 * @param distanceOnUnpavedHighway the distanceOnUnpavedHighway
	 * @param vehicleUsed the vehicleUsed
	 * @param freightCarried the freightCarried  
	 * @return the result
	 */
	public BigDecimal calculatesTransportationCost (
													int distanceOnPavedHighway, 
													int distanceOnUnpavedHighway,
													int vehicleUsed,
													int freightCarried
												   ) {
		BigDecimal result = BigDecimal.ZERO;
				
		if (distanceOnPavedHighway > 0) {
			result = new BigDecimal (distanceOnPavedHighway).multiply (new BigDecimal (Constants.PAVED_HIGHWAY_TRANSPORTATION_COST_PER_KILOMETER));
		}
		
		if (distanceOnUnpavedHighway > 0) {
			result = result.add (new BigDecimal(distanceOnUnpavedHighway).multiply (new BigDecimal (Constants.UNPAVED_HIGHWAY_TRANSPORTATION_COST_PER_KILOMETER)));
		}
		
		if (vehicleUsed == Constants.VEHICLE_TYPE_CAMINHAO_BAU) {
			
			result = result.multiply (new BigDecimal (Constants.MULTIPLIER_FACTOR_CAMINHAO_BAU));
			
		} else if (vehicleUsed == Constants.VEHICLE_TYPE_CAMINHAO_CACAMBA) {
			
			result = result.multiply (new BigDecimal (Constants.MULTIPLIER_FACTOR_CAMINHAO_CACAMBA));
			
		} else if (vehicleUsed == Constants.VEHICLE_TYPE_CARRETA) {
			
			result = result.multiply (new BigDecimal (Constants.MULTIPLIER_FACTOR_CARRETA));
			
		}
		
		if (freightCarried >= Constants.FREIGHT_CARRIED_8) {
			int freightCarriedResult = freightCarried - Constants.FREIGHT_CARRIED_5;
			
			double totalIncrementPerKilometerWheeled = freightCarriedResult * Constants.INCREMENT_PER_KILOMETER_WHEELED;
			
			int totalDistance = distanceOnPavedHighway + distanceOnUnpavedHighway;
			result = result.add (new BigDecimal(totalDistance).multiply (new BigDecimal(totalIncrementPerKilometerWheeled)));
			
		}		
		
		return result;
	}  
	
}
